<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!-- 

This is an example Solr schema for use with eulfedora indexdata,
(adapted from a Solr example schema).  It includes field
configurations for all the fields that are made available by the
default DigitalObject index_data method.  This may be a useful initial
Solr Schema for projects using eulfedora and indexdata.  

-->


<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="post" version="1.1">
    <!-- attribute "name" is the name of this schema and is only used
         for display purposes.  Applications should change this to
         reflect the nature of the search collection.  version="1.1" is
         Solr's version number for the schema syntax and semantics.  It
         should not normally be changed by applications.  1.0:
         multiValued attribute did not exist, all fields are multiValued
         by nature 1.1: multiValued attribute introduced, false by
         default -->

    <types>
        <!-- field type definitions. The "name" attribute is
           just a label to be used by field definitions.  The "class"
           attribute and any other attributes determine the real
           behavior of the fieldType.
             Class names starting with "solr" refer to java classes in the
           org.apache.solr.analysis package.
        -->

        <!-- The StrField type is not analyzed, but indexed/stored verbatim.
           - StrField and TextField support an optional compressThreshold which
           limits compression (if enabled in the derived fields) to values which
           exceed a certain size (in characters).
        -->
        <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

        <!-- boolean type: "true" or "false" -->
        <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>

        <!-- A text field that only splits on whitespace for exact matching of words -->
        <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            </analyzer>
        </fieldType>

        <!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
            words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
            so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
            Synonyms and stopwords are customized by external files, and stemming is enabled.
            Duplicate tokens at the same position (which may result from Stemmed Synonyms or
            WordDelim parts) are removed.
            -->
        <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!-- in this example, we will only use synonyms at query time
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
                -->
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1"
                        generateNumberParts="1" catenateWords="1" catenateNumbers="1"
                        catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1"
                        generateNumberParts="1" catenateWords="0" catenateNumbers="0"
                        catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldType>


        <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
             but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
        <fieldType name="textTight" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0"
                        generateNumberParts="0" catenateWords="1" catenateNumbers="1"
                        catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldType>

        <!-- This is an example of using the KeywordTokenizer along
             With various TokenFilterFactories to produce a sortable field
             that does not include some properties of the source text
          -->
        <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true"
                   omitNorms="true">
            <analyzer>
                <!-- KeywordTokenizer does no actual tokenizing, so the entire
                     input string is preserved as a single token
                  -->
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <!-- The LowerCase TokenFilter does what you expect, which can be
                     when you want your sorting to be case insensitive
                  -->
                <filter class="solr.LowerCaseFilterFactory"/>
                <!-- The TrimFilter removes any leading or trailing whitespace -->
                <filter class="solr.TrimFilterFactory"/>
                <!-- The PatternReplaceFilter gives you the flexibility to use
                     Java Regular expression to replace any sequence of characters
                     matching a pattern with an arbitrary replacement string,
                     which may include back refrences to portions of the orriginal
                     string matched by the pattern.

                     See the Java Regular Expression documentation for more
                     infomation on pattern and replacement string syntax.

                     http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/package-summary.html
                  -->
                <filter class="solr.PatternReplaceFilterFactory"
                        pattern="([^a-z])" replacement="" replace="all"
                />
            </analyzer>
        </fieldType>

        <!-- since fields of this type are by default not stored or indexed, any data added to
             them will be ignored outright
         -->
        <fieldtype name="ignored" stored="false" indexed="false" class="solr.StrField"/>

    </types>


    <fields>
        <field name="id" type="string" indexed="true" stored="true" required="true"/>
        <field name="author_name" type="string" indexed="true" stored="true" required="true"/>
        <field name="content" type="text" indexed="true" stored="true" required="true"/>
    </fields>

    <uniqueKey>id</uniqueKey>


</schema>
